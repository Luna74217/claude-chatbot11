import React, { useState, useRef, useEffect, useMemo } from 'react';
import { Send, Plus, Search, Menu, X, Copy, Check, Sun, Moon, Paperclip, Code, FileText, File, Image, FileVideo, FileAudio, Settings, Trash2, RotateCcw } from 'lucide-react';

// 타입 정의
const MessageRole = {
  USER: 'user',
  ASSISTANT: 'assistant'
};

// 샘플 대화 데이터 (검색을 위해 메시지 포함)
const sampleConversations = [
  { 
    id: 1, 
    title: "React 컴포넌트 최적화", 
    lastMessage: "useMemo와 useCallback의 차이점은...", 
    time: "2분 전",
    messages: [
      { id: 1, role: MessageRole.USER, content: "React 앱이 느려요. **useMemo**와 **useCallback** 언제 써야 하나요?" },
      { id: 2, role: MessageRole.ASSISTANT, content: "React 성능 최적화를 위한 Hook 사용법을 설명드리겠습니다.\n\n## useMemo vs useCallback\n\n### useMemo\n- 계산 비용이 높은 값을 메모이제이션\n- 의존성 배열의 값이 변경될 때만 재계산\n\n```javascript\nconst expensiveValue = useMemo(() => {\n  return computeExpensiveValue(a, b);\n}, [a, b]);\n```\n\n### useCallback\n- 함수를 메모이제이션\n- 자식 컴포넌트에 콜백을 전달할 때 유용" }
    ]
  },
  { 
    id: 2, 
    title: "Python 데이터 분석", 
    lastMessage: "Pandas DataFrame 병합 방법", 
    time: "1시간 전",
    messages: [
      { id: 1, role: MessageRole.USER, content: "**Pandas**로 CSV 파일 읽고 데이터 병합하는 방법 알려주세요" },
      { id: 2, role: MessageRole.ASSISTANT, content: "Pandas를 사용한 데이터 병합 방법입니다:\n\n```python\nimport pandas as pd\n\n# CSV 파일 읽기\ndf1 = pd.read_csv('file1.csv')\ndf2 = pd.read_csv('file2.csv')\n\n# 병합하기\nmerged = pd.merge(df1, df2, on='key_column')\n```" }
    ]
  },
  { 
    id: 3, 
    title: "API 설계 패턴", 
    lastMessage: "RESTful vs GraphQL 비교", 
    time: "어제",
    messages: [
      { id: 1, role: MessageRole.USER, content: "**RESTful API**와 **GraphQL** 중 뭐가 더 좋아요?" },
      { id: 2, role: MessageRole.ASSISTANT, content: "각각의 장단점을 비교해드리겠습니다:\n\n## REST\n- 간단하고 직관적\n- HTTP 메서드 활용\n- 캐싱 용이\n\n## GraphQL\n- 필요한 데이터만 요청\n- 단일 엔드포인트\n- 실시간 구독 지원" }
    ]
  },
];

// 마크다운 렌더링을 위한 컴포넌트
const MarkdownRenderer = ({ content, darkMode, searchQuery = '', isSearching = false }) => {
  // 검색어 하이라이팅
  const highlightSearchQuery = (text) => {
    if (!searchQuery || !isSearching) return text;

    const regex = new RegExp(`(${searchQuery})`, 'gi');
    return text.replace(regex, '<mark class="search-highlight">$1</mark>');
  };

  const renderMarkdown = (text) => {
    // 먼저 검색어 하이라이팅 적용
    text = highlightSearchQuery(text);

    // 코드 블록 처리 (```로 감싸진 부분)
    text = text.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
      return `<pre class="markdown-code-block ${darkMode ? 'dark' : 'light'}"><code class="language-${lang || 'text'}">${code.trim()}</code></pre>`;
    });

    // 인라인 코드 처리
    text = text.replace(/`([^`]+)`/g, '<code class="markdown-inline-code">$1</code>');

    // 굵은 글씨
    text = text.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');

    // 기울임체
    text = text.replace(/\*([^*]+)\*/g, '<em>$1</em>');

    // 제목 처리
    text = text.replace(/^### (.*$)/gim, '<h3 class="markdown-h3">$1</h3>');
    text = text.replace(/^## (.*$)/gim, '<h2 class="markdown-h2">$1</h2>');
    text = text.replace(/^# (.*$)/gim, '<h1 class="markdown-h1">$1</h1>');

    // 목록 처리
    text = text.replace(/^\- (.*$)/gim, '<li class="markdown-list-item">$1</li>');
    text = text.replace(/(<li class="markdown-list-item">.*<\/li>)/s, '<ul class="markdown-list">$1</ul>');

    // 숫자 목록
    text = text.replace(/^\d+\. (.*$)/gim, '<li class="markdown-ordered-item">$1</li>');

    // 링크 처리
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="markdown-link" target="_blank" rel="noopener noreferrer">$1</a>');

    // 인용구
    text = text.replace(/^> (.*$)/gim, '<blockquote class="markdown-quote">$1</blockquote>');

    // 줄바꿈 처리
    text = text.replace(/\n/g, '<br />');

    return text;
  };

  return (
    <div 
      className="markdown-content"
      dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}
    />
  );
};

const ChatInterface = () => {
  const [conversations, setConversations] = useState(sampleConversations);
  const [activeConversation, setActiveConversation] = useState(1);
  const [messages, setMessages] = useState(sampleConversations[0].messages);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [artifactOpen, setArtifactOpen] = useState(true);
  const [darkMode, setDarkMode] = useState(false);
  const [copiedId, setCopiedId] = useState(null);
  const [attachedFiles, setAttachedFiles] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchMode, setSearchMode] = useState('all'); // all, title, content
  const [isSearching, setIsSearching] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [fontSize, setFontSize] = useState('medium'); // small, medium, large
  const messagesEndRef = useRef(null);
  const textareaRef = useRef(null);
  const fileInputRef = useRef(null);

  // 로컬 스토리지에서 설정 불러오기
  useEffect(() => {
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        const savedSettings = localStorage.getItem('chatSettings');
        if (savedSettings) {
          const settings = JSON.parse(savedSettings);
          setDarkMode(settings.darkMode || false);
          setFontSize(settings.fontSize || 'medium');
        }
      }
    } catch (error) {
      console.log('localStorage not available');
    }
  }, []);

  // 설정 저장
  useEffect(() => {
    try {
      if (typeof window !== 'undefined' && window.localStorage) {
        const settings = {
          darkMode,
          fontSize
        };
        localStorage.setItem('chatSettings', JSON.stringify(settings));
      }
    } catch (error) {
      console.log('localStorage not available');
    }
  }, [darkMode, fontSize]);

  // 검색 상태 관리
  useEffect(() => {
    setIsSearching(searchQuery.trim().length > 0);
  }, [searchQuery]);

  // 검색 결과 필터링
  const filteredConversations = useMemo(() => {
    if (!searchQuery.trim()) {
      return conversations;
    }

    const query = searchQuery.toLowerCase();

    return conversations.filter(conv => {
      switch (searchMode) {
        case 'title':
          return conv.title.toLowerCase().includes(query);
        case 'content':
          return conv.messages && conv.messages.some(msg => 
            msg.content.toLowerCase().includes(query)
          );
        case 'all':
        default:
          return conv.title.toLowerCase().includes(query) ||
                 (conv.messages && conv.messages.some(msg => 
                   msg.content.toLowerCase().includes(query)
                 ));
      }
    });
  }, [searchQuery, searchMode, conversations]);

  // 대화 전환
  const switchConversation = (convId) => {
    const conv = conversations.find(c => c.id === convId);
    if (conv) {
      setActiveConversation(convId);
      setMessages(conv.messages || []);
      setSearchQuery(''); // 검색 초기화
    }
  };

  // 메시지 스크롤
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Textarea 자동 높이 조절
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [inputValue]);

  // 파일 타입에 따른 아이콘 반환
  const getFileIcon = (type) => {
    if (type.startsWith('image/')) return Image;
    if (type.startsWith('video/')) return FileVideo;
    if (type.startsWith('audio/')) return FileAudio;
    if (type.includes('pdf')) return FileText;
    return File;
  };

  // 파일 크기 포맷팅
  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  // 파일 선택 핸들러
  const handleFileSelect = (e) => {
    const files = Array.from(e.target.files);
    const validFiles = files.filter(file => {
      // 파일 크기 제한 (10MB)
      if (file.size > 10 * 1024 * 1024) {
        alert(`${file.name}은(는) 10MB를 초과합니다.`);
        return false;
      }
      return true;
    });

    setAttachedFiles(prev => [...prev, ...validFiles.map(file => ({
      file,
      id: Date.now() + Math.random(),
      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : null
    }))]);
  };

  // 파일 삭제
  const removeFile = (fileId) => {
    setAttachedFiles(prev => prev.filter(f => f.id !== fileId));
  };

  // 드래그 앤 드롭 핸들러
  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);

    const files = Array.from(e.dataTransfer.files);
    const validFiles = files.filter(file => file.size <= 10 * 1024 * 1024);

    setAttachedFiles(prev => [...prev, ...validFiles.map(file => ({
      file,
      id: Date.now() + Math.random(),
      preview: file.type.startsWith('image/') ? URL.createObjectURL(file) : null
    }))]);
  };

  // 검색어 하이라이팅 함수
  const highlightText = (text, query, isDark) => {
    if (!query.trim()) return text;

    const parts = text.split(new RegExp(`(${query})`, 'gi'));
    return parts.map((part, index) => 
      part.toLowerCase() === query.toLowerCase() 
        ? <span key={index} className={`${isDark ? 'bg-yellow-600/30 text-yellow-300' : 'bg-yellow-300 text-gray-900'} px-0.5 rounded`}>{part}</span>
        : part
    );
  };

  // 메시지 전송
  const handleSend = () => {
    if (!inputValue.trim() && attachedFiles.length === 0) return;

    const userMessage = inputValue; // 값 저장
    const newMessage = {
      id: messages.length + 1,
      role: MessageRole.USER,
      content: userMessage,
      files: attachedFiles.map(f => ({
        name: f.file.name,
        type: f.file.type,
        size: f.file.size,
        preview: f.preview
      }))
    };

    const updatedMessages = [...messages, newMessage];
    setMessages(updatedMessages);

    // 현재 대화 업데이트
    setConversations(prev => prev.map(conv => 
      conv.id === activeConversation
        ? { ...conv, messages: updatedMessages, lastMessage: userMessage || "파일 전송", time: "방금" }
        : conv
    ));

    setInputValue('');
    setAttachedFiles([]);
    setIsTyping(true);

    // AI 응답 시뮬레이션
    setTimeout(() => {
      const fileCount = newMessage.files.length;
      const fileInfo = fileCount > 0 ? `\n\n첨부하신 ${fileCount}개의 파일을 확인했습니다.` : '';

      const aiResponse = {
        id: messages.length + 2,
        role: MessageRole.ASSISTANT,
        content: `제가 분석한 내용을 **마크다운 형식**으로 답변드리겠습니다.${fileInfo}

## Claude 스타일 UI의 특징

1. **깔끔한 디자인**
   - 미니멀한 인터페이스
   - 직관적인 레이아웃

2. **주요 기능**
   - \`마크다운\` 렌더링 지원
   - 코드 하이라이팅
   - 다크모드 토글
   - 파일 업로드 지원
   - 대화 내용 검색

\`\`\`javascript
// 예제 코드
const greeting = (name) => {
  return \`안녕하세요, \${name}님!\`;
};
\`\`\`

> "심플한 게 최고의 솔루션이에요" - Dr. Chen

더 자세한 정보는 [Claude 문서](https://docs.anthropic.com)를 참고하세요.`
      };

      const finalMessages = [...updatedMessages, aiResponse];
      setMessages(finalMessages);

      // AI 응답도 대화에 저장하고, 새 대화인 경우 제목 업데이트
      setConversations(prev => prev.map(conv => {
        if (conv.id === activeConversation) {
          const updatedConv = {
            ...conv,
            messages: finalMessages,
            lastMessage: "AI 응답 완료",
            time: "방금"
          };

          // 새 대화인 경우 첫 메시지 내용으로 제목 설정
          if (conv.title === "새 대화" && userMessage) {
            updatedConv.title = userMessage.slice(0, 30) + (userMessage.length > 30 ? "..." : "");
          }

          return updatedConv;
        }
        return conv;
      }));

      setIsTyping(false);
    }, 1500);
  };

  // 코드 복사
  const handleCopy = (text, messageId) => {
    navigator.clipboard.writeText(text);
    setCopiedId(messageId);
    setTimeout(() => setCopiedId(null), 2000);
  };

  // 새 대화 시작
  const startNewChat = () => {
    const newConv = {
      id: Date.now(), // 고유 ID 생성
      title: "새 대화",
      lastMessage: "",
      time: "방금",
      messages: []
    };
    setConversations([newConv, ...conversations]);
    setActiveConversation(newConv.id);
    setMessages([]);
    setSearchQuery(''); // 검색 초기화
  };

  // 대화 삭제 함수
  const deleteConversation = (convId) => {
    if (window.confirm('이 대화를 삭제하시겠습니까?')) {
      setConversations(prev => prev.filter(c => c.id !== convId));

      // 삭제한 대화가 현재 활성 대화인 경우
      if (convId === activeConversation) {
        const remainingConvs = conversations.filter(c => c.id !== convId);
        if (remainingConvs.length > 0) {
          switchConversation(remainingConvs[0].id);
        } else {
          // 대화가 없으면 새 대화 시작
          startNewChat();
        }
      }
    }
  };

  // 모든 대화 삭제
  const deleteAllConversations = () => {
    if (window.confirm('모든 대화 기록을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
      setConversations([]);
      startNewChat();
    }
  };

  // 설정 초기화
  const resetSettings = () => {
    if (window.confirm('모든 설정을 기본값으로 초기화하시겠습니까?')) {
      setDarkMode(false);
      setFontSize('medium');
      localStorage.removeItem('chatSettings');
    }
  };

  // 폰트 크기에 따른 클래스 반환
  const getFontSizeClass = () => {
    switch(fontSize) {
      case 'small': return 'text-xs';
      case 'large': return 'text-base';
      default: return 'text-sm';
    }
  };

  // 설정 모달 컴포넌트
  const SettingsModal = () => {
    if (!showSettings) return null;

    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50" onClick={() => setShowSettings(false)}>
        <div 
          className={`w-full max-w-lg mx-4 rounded-lg shadow-xl ${darkMode ? 'bg-gray-800' : 'bg-white'}`}
          onClick={(e) => e.stopPropagation()}
        >
          {/* 헤더 */}
          <div className={`flex items-center justify-between p-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            <h2 className={`text-xl font-semibold flex items-center gap-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              <Settings size={24} />
              설정
            </h2>
            <button
              onClick={() => setShowSettings(false)}
              className={`p-2 rounded-lg transition-colors ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
            >
              <X size={20} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
            </button>
          </div>

          {/* 설정 내용 */}
          <div className="p-6 space-y-6">
            {/* 외관 설정 */}
            <div>
              <h3 className={`text-lg font-medium mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                🎨 외관 설정
              </h3>

              {/* 다크모드 */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>다크 모드</p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>어두운 테마를 사용합니다</p>
                  </div>
                  <button
                    onClick={() => setDarkMode(!darkMode)}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                      darkMode ? 'bg-blue-600' : 'bg-gray-200'
                    }`}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        darkMode ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>

                {/* 폰트 크기 */}
                <div>
                  <p className={`font-medium mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>폰트 크기</p>
                  <div className="flex gap-2">
                    {['small', 'medium', 'large'].map((size) => (
                      <button
                        key={size}
                        onClick={() => setFontSize(size)}
                        className={`px-4 py-2 rounded-lg transition-colors ${
                          fontSize === size
                            ? darkMode ? 'bg-blue-600 text-white' : 'bg-blue-500 text-white'
                            : darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                        }`}
                      >
                        {size === 'small' ? '작게' : size === 'medium' ? '보통' : '크게'}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* 데이터 관리 */}
            <div>
              <h3 className={`text-lg font-medium mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                🗂️ 데이터 관리
              </h3>

              <div className="space-y-3">
                {/* 현재 대화 삭제 */}
                <button
                  onClick={() => {
                    deleteConversation(activeConversation);
                    setShowSettings(false);
                  }}
                  className={`w-full flex items-center justify-between p-3 rounded-lg transition-colors ${
                    darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <Trash2 size={18} className="text-red-500" />
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>현재 대화 삭제</span>
                  </div>
                </button>

                {/* 모든 대화 삭제 */}
                <button
                  onClick={() => {
                    deleteAllConversations();
                    setShowSettings(false);
                  }}
                  className={`w-full flex items-center justify-between p-3 rounded-lg transition-colors ${
                    darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <Trash2 size={18} className="text-red-500" />
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>모든 대화 삭제</span>
                  </div>
                  <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    {conversations.length}개
                  </span>
                </button>
              </div>
            </div>

            {/* 초기화 */}
            <div>
              <button
                onClick={() => {
                  resetSettings();
                  setShowSettings(false);
                }}
                className={`w-full flex items-center justify-center gap-2 p-3 rounded-lg border transition-colors ${
                  darkMode 
                    ? 'border-gray-600 text-gray-300 hover:bg-gray-700' 
                    : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                <RotateCcw size={18} />
                <span>모든 설정 초기화</span>
              </button>
            </div>
          </div>

          {/* 푸터 */}
          <div className={`p-4 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            <p className={`text-center text-xs ${darkMode ? 'text-gray-500' : 'text-gray-400'}`}>
              설정은 브라우저에 자동으로 저장됩니다
            </p>
          </div>
        </div>
      </div>
    );
  };

  // 마크다운 스타일 정의
  const markdownStyles = `
    .markdown-content {
      word-break: break-word;
    }

    .markdown-content strong {
      font-weight: 600;
    }

    .markdown-content em {
      font-style: italic;
    }

    .search-highlight {
      background-color: ${darkMode ? 'rgba(250, 204, 21, 0.3)' : 'rgba(250, 204, 21, 0.5)'};
      color: ${darkMode ? '#fbbf24' : '#92400e'};
      padding: 0.125rem 0.25rem;
      border-radius: 0.25rem;
      font-weight: 500;
    }

    .markdown-inline-code {
      background-color: ${darkMode ? 'rgba(75, 85, 99, 0.4)' : 'rgba(229, 231, 235, 1)'};
      color: ${darkMode ? '#f472b6' : '#e11d48'};
      padding: 0.125rem 0.375rem;
      border-radius: 0.25rem;
      font-family: monospace;
      font-size: 0.875em;
    }

    .markdown-code-block {
      background-color: ${darkMode ? '#1f2937' : '#1e293b'};
      color: ${darkMode ? '#e5e7eb' : '#f1f5f9'};
      padding: 1rem;
      border-radius: 0.5rem;
      overflow-x: auto;
      margin: 1rem 0;
      font-family: monospace;
      font-size: 0.875rem;
      line-height: 1.5;
    }

    .markdown-code-block code {
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    .markdown-h1 {
      font-size: 1.5rem;
      font-weight: 700;
      margin: 1rem 0 0.5rem 0;
      color: ${darkMode ? '#f3f4f6' : '#111827'};
    }

    .markdown-h2 {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0.875rem 0 0.5rem 0;
      color: ${darkMode ? '#f3f4f6' : '#111827'};
    }

    .markdown-h3 {
      font-size: 1.125rem;
      font-weight: 600;
      margin: 0.75rem 0 0.5rem 0;
      color: ${darkMode ? '#f3f4f6' : '#111827'};
    }

    .markdown-list {
      margin: 0.5rem 0;
      padding-left: 1.5rem;
      list-style-type: disc;
    }

    .markdown-list-item {
      margin: 0.25rem 0;
      list-style-type: disc;
    }

    .markdown-ordered-item {
      margin: 0.25rem 0;
      list-style-type: decimal;
      margin-left: 1.5rem;
    }

    .markdown-link {
      color: ${darkMode ? '#60a5fa' : '#2563eb'};
      text-decoration: underline;
      cursor: pointer;
    }

    .markdown-link:hover {
      color: ${darkMode ? '#93bbfc' : '#1d4ed8'};
    }

    .markdown-quote {
      border-left: 4px solid ${darkMode ? '#4b5563' : '#d1d5db'};
      padding-left: 1rem;
      margin: 1rem 0;
      color: ${darkMode ? '#9ca3af' : '#6b7280'};
      font-style: italic;
    }
  `;

  return (
    <>
      <SettingsModal />
      <div className={`flex h-screen ${darkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>
        <style dangerouslySetInnerHTML={{ __html: markdownStyles }} />

        {/* 사이드바 */}
        <div className={`${sidebarOpen ? 'w-64' : 'w-0'} transition-all duration-300 flex-shrink-0 ${darkMode ? 'bg-gray-800' : 'bg-white'} border-r ${darkMode ? 'border-gray-700' : 'border-gray-200'} overflow-hidden`}>
          <div className="p-4">
            <button
              onClick={startNewChat}
              className={`w-full flex items-center gap-2 px-4 py-3 rounded-lg ${darkMode ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'} transition-colors`}
            >
              <Plus size={20} />
              <span>새 대화</span>
            </button>
          </div>

          <div className="px-4 mb-4">
            <div className={`flex items-center gap-2 px-3 py-2 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
              <Search size={16} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="대화 검색..."
                className={`flex-1 bg-transparent outline-none ${getFontSizeClass()} ${darkMode ? 'text-white placeholder-gray-400' : 'text-gray-700 placeholder-gray-500'}`}
              />
              {searchQuery && (
                <button
                  onClick={() => setSearchQuery('')}
                  className={`p-1 rounded hover:bg-gray-600 transition-colors`}
                >
                  <X size={14} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                </button>
              )}
            </div>

            {/* 검색 모드 선택 */}
            {searchQuery && (
              <div className="flex gap-1 mt-2">
                {[
                  { value: 'all', label: '전체' },
                  { value: 'title', label: '제목' },
                  { value: 'content', label: '내용' }
                ].map(mode => (
                  <button
                    key={mode.value}
                    onClick={() => setSearchMode(mode.value)}
                    className={`px-2 py-1 text-xs rounded transition-colors ${
                      searchMode === mode.value
                        ? darkMode ? 'bg-blue-600 text-white' : 'bg-blue-500 text-white'
                        : darkMode ? 'bg-gray-600 text-gray-300' : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {mode.label}
                  </button>
                ))}
              </div>
            )}
          </div>

          <div className="overflow-y-auto px-2">
            {searchQuery && filteredConversations.length === 0 && (
              <div className={`text-center py-8 px-4 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                <Search size={32} className="mx-auto mb-2 opacity-50" />
                <p className="text-sm">"{searchQuery}"에 대한</p>
                <p className="text-sm">검색 결과가 없습니다</p>
              </div>
            )}

            {!searchQuery && (
              <div className={`px-4 py-2 mb-2 text-xs ${darkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                💡 팁: 대화 내용을 검색하려면 위 검색창을 사용하세요
              </div>
            )}

            {filteredConversations.map(conv => (
              <button
                key={conv.id}
                onClick={() => switchConversation(conv.id)}
                className={`w-full text-left p-3 rounded-lg mb-1 transition-colors ${
                  activeConversation === conv.id
                    ? darkMode ? 'bg-gray-700' : 'bg-gray-100'
                    : darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'
                }`}
              >
                <div className={`font-medium ${getFontSizeClass()} ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {isSearching && searchMode !== 'content' ? 
                    highlightText(conv.title, searchQuery, darkMode) : 
                    conv.title
                  }
                </div>
                <div className={`${fontSize === 'large' ? 'text-sm' : 'text-xs'} ${darkMode ? 'text-gray-400' : 'text-gray-500'} truncate mt-1`}>
                  {conv.lastMessage}
                </div>
                <div className={`${fontSize === 'large' ? 'text-sm' : 'text-xs'} ${darkMode ? 'text-gray-500' : 'text-gray-400'} mt-1 flex items-center justify-between`}>
                  <span>{conv.time}</span>
                  {isSearching && searchMode !== 'title' && conv.messages?.some(msg => 
                    msg.content.toLowerCase().includes(searchQuery.toLowerCase())
                  ) && (
                    <span className={`px-1.5 py-0.5 rounded ${fontSize === 'large' ? 'text-sm' : 'text-xs'} ${darkMode ? 'bg-blue-600/20 text-blue-400' : 'bg-blue-100 text-blue-600'}`}>
                      내용 일치
                    </span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* 메인 채팅 영역 */}
        <div className="flex-1 flex flex-col">
          {/* 헤더 */}
          <div className={`flex items-center justify-between px-6 py-4 border-b ${darkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
            <div className="flex items-center gap-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <Menu size={20} className={darkMode ? 'text-white' : 'text-gray-700'} />
              </button>
              <h1 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                {conversations.find(c => c.id === activeConversation)?.title || 'Claude UI 클론'}
                {isSearching && (
                  <span className={`ml-2 text-sm font-normal ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    (검색 중)
                  </span>
                )}
              </h1>
            </div>

            <div className="flex items-center gap-2">
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                {darkMode ? <Sun size={20} className="text-white" /> : <Moon size={20} className="text-gray-700" />}
              </button>
              <button
                onClick={() => setShowSettings(true)}
                className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <Settings size={20} className={darkMode ? 'text-white' : 'text-gray-700'} />
              </button>
              <button
                onClick={() => setArtifactOpen(!artifactOpen)}
                className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <Code size={20} className={darkMode ? 'text-white' : 'text-gray-700'} />
              </button>
            </div>
          </div>

          {/* 메시지 영역 */}
          <div className="flex-1 overflow-y-auto px-4 py-6">
            <div className="max-w-3xl mx-auto">
              {messages.map(message => (
                <div key={message.id} className={`mb-6 flex ${message.role === MessageRole.USER ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[80%] ${message.role === MessageRole.USER ? 'order-2' : ''}`}>
                    <div className="flex items-start gap-3">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        message.role === MessageRole.USER 
                          ? darkMode ? 'bg-blue-600' : 'bg-blue-500'
                          : darkMode ? 'bg-purple-600' : 'bg-purple-500'
                      }`}>
                        <span className="text-white text-sm font-medium">
                          {message.role === MessageRole.USER ? 'U' : 'A'}
                        </span>
                      </div>

                      <div className="flex-1">
                        <div className={`rounded-lg px-4 py-3 ${
                          message.role === MessageRole.USER
                            ? darkMode ? 'bg-blue-900/30 text-white' : 'bg-blue-50 text-gray-900'
                            : darkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900 shadow-sm'
                        }`}>
                          <div className={`${getFontSizeClass()} leading-relaxed`}>
                            <MarkdownRenderer 
                              content={message.content} 
                              darkMode={darkMode} 
                              searchQuery={searchQuery}
                              isSearching={isSearching}
                            />
                          </div>

                          {/* 첨부 파일 표시 */}
                          {message.files && message.files.length > 0 && (
                            <div className="mt-3 space-y-2">
                              {message.files.map((file, index) => (
                                <div key={index} className={`flex items-center gap-2 p-2 rounded ${darkMode ? 'bg-gray-600' : 'bg-gray-100'}`}>
                                  {file.preview ? (
                                    <img src={file.preview} alt={file.name} className="w-16 h-16 object-cover rounded" />
                                  ) : (
                                    <div className={`p-2 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                                      {React.createElement(getFileIcon(file.type), { size: 20, className: darkMode ? 'text-gray-300' : 'text-gray-600' })}
                                    </div>
                                  )}
                                  <div className="flex-1 min-w-0">
                                    <p className={`text-xs font-medium truncate ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                                      {file.name}
                                    </p>
                                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      {formatFileSize(file.size)}
                                    </p>
                                  </div>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>

                        {message.role === MessageRole.ASSISTANT && (
                          <div className="flex items-center gap-2 mt-2 px-1">
                            <button
                              onClick={() => handleCopy(message.content, message.id)}
                              className={`p-1.5 rounded ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'} transition-colors`}
                            >
                              {copiedId === message.id ? 
                                <Check size={14} className="text-green-500" /> : 
                                <Copy size={14} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                              }
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}

              {isTyping && (
                <div className="flex items-center gap-3 mb-6">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${darkMode ? 'bg-purple-600' : 'bg-purple-500'}`}>
                    <span className="text-white text-sm font-medium">A</span>
                  </div>
                  <div className={`px-4 py-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-white shadow-sm'}`}>
                    <div className="flex gap-1">
                      <span className={`w-2 h-2 rounded-full ${darkMode ? 'bg-gray-400' : 'bg-gray-500'} animate-bounce`} style={{animationDelay: '0ms'}}></span>
                      <span className={`w-2 h-2 rounded-full ${darkMode ? 'bg-gray-400' : 'bg-gray-500'} animate-bounce`} style={{animationDelay: '150ms'}}></span>
                      <span className={`w-2 h-2 rounded-full ${darkMode ? 'bg-gray-400' : 'bg-gray-500'} animate-bounce`} style={{animationDelay: '300ms'}}></span>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>
          </div>

          {/* 입력 영역 */}
          <div 
            className={`relative border-t ${darkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'} px-4 py-4`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <div className="max-w-3xl mx-auto">
              {/* 드래그 오버레이 */}
              {isDragging && (
                <div className="absolute inset-0 z-50 flex items-center justify-center pointer-events-none">
                  <div className={`p-8 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-white'} shadow-lg border-2 border-dashed ${darkMode ? 'border-gray-500' : 'border-gray-300'}`}>
                    <Paperclip size={48} className={`${darkMode ? 'text-gray-300' : 'text-gray-600'} animate-bounce`} />
                    <p className={`mt-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'} font-medium`}>파일을 여기에 놓으세요</p>
                  </div>
                </div>
              )}

              {/* 첨부 파일 미리보기 */}
              {attachedFiles.length > 0 && (
                <div className="mb-3 flex flex-wrap gap-2">
                  {attachedFiles.map(fileItem => (
                    <div key={fileItem.id} className={`relative group flex items-center gap-2 px-3 py-2 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                      {fileItem.preview ? (
                        <img src={fileItem.preview} alt={fileItem.file.name} className="w-10 h-10 object-cover rounded" />
                      ) : (
                        React.createElement(getFileIcon(fileItem.file.type), { size: 16, className: darkMode ? 'text-gray-400' : 'text-gray-600' })
                      )}
                      <span className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-700'} max-w-[100px] truncate`}>
                        {fileItem.file.name}
                      </span>
                      <button
                        onClick={() => removeFile(fileItem.id)}
                        className={`ml-1 p-1 rounded opacity-0 group-hover:opacity-100 transition-opacity ${darkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-200'}`}
                      >
                        <X size={14} className={darkMode ? 'text-gray-400' : 'text-gray-600'} />
                      </button>
                    </div>
                  ))}
                </div>
              )}

              <div className={`flex items-end gap-2 px-4 py-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  onChange={handleFileSelect}
                  className="hidden"
                  accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt"
                />

                <button 
                  onClick={() => fileInputRef.current?.click()}
                  className={`p-2 ${darkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-200'} rounded-lg transition-colors`}
                >
                  <Paperclip size={20} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                </button>

                <textarea
                  ref={textareaRef}
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSend();
                    }
                  }}
                  placeholder="메시지를 입력하세요..."
                  className={`flex-1 resize-none outline-none bg-transparent ${darkMode ? 'text-white placeholder-gray-400' : 'text-gray-900 placeholder-gray-500'} ${getFontSizeClass()}`}
                  rows="1"
                  style={{ maxHeight: '200px' }}
                />

                <button
                  onClick={handleSend}
                  disabled={!inputValue.trim() && attachedFiles.length === 0}
                  className={`p-2 rounded-lg transition-colors ${
                    (inputValue.trim() || attachedFiles.length > 0)
                      ? darkMode ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'
                      : darkMode ? 'bg-gray-600 text-gray-400' : 'bg-gray-300 text-gray-400'
                  }`}
                >
                  <Send size={20} />
                </button>
              </div>

              <div className={`text-xs ${darkMode ? 'text-gray-500' : 'text-gray-400'} text-center mt-2`}>
                Dr. Chen이 도와드립니다. Shift+Enter로 줄바꿈, Enter로 전송 | 파일 드래그 앤 드롭 가능 (최대 10MB)
              </div>
            </div>
          </div>
        </div>

        {/* 아티팩트 패널 */}
        <div className={`${artifactOpen ? 'w-96' : 'w-0'} transition-all duration-300 flex-shrink-0 ${darkMode ? 'bg-gray-800' : 'bg-white'} border-l ${darkMode ? 'border-gray-700' : 'border-gray-200'} overflow-hidden`}>
          <div className="p-4">
            <div className="flex items-center justify-between mb-4">
              <h2 className={`font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>아티팩트</h2>
              <button
                onClick={() => setArtifactOpen(false)}
                className={`p-1.5 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <X size={18} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
              </button>
            </div>

            <div className={`rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} p-4`}>
              <div className="flex items-center gap-2 mb-3">
                <FileText size={16} className={darkMode ? 'text-gray-400' : 'text-gray-500'} />
                <span className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  Claude UI 구현.tsx
                </span>
              </div>

              <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'} font-mono`}>
                <div>// Claude 스타일 UI 클론</div>
                <div>// - 3단 레이아웃</div>
                <div>// - 다크모드 지원</div>
                <div>// - 반응형 디자인</div>
                <div>// - 타이핑 애니메이션</div>
                <div>// - 마크다운 렌더링</div>
                <div>// - 코드 하이라이팅</div>
                <div>// - 파일 업로드 & 드래그 앤 드롭</div>
                <div>// - 파일 미리보기</div>
                <div>// - 대화 내용 검색</div>
                <div>// - 검색어 하이라이팅</div>
                <div>// - 설정 메뉴</div>
              </div>
            </div>

            <div className={`mt-4 p-4 rounded-lg ${darkMode ? 'bg-gray-900' : 'bg-blue-50'}`}>
              <h3 className={`text-sm font-medium mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                구현된 기능
              </h3>
              <ul className={`text-xs space-y-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                <li>✓ 대화 목록 관리</li>
                <li>✓ 메시지 전송/표시</li>
                <li>✓ 다크모드 토글</li>
                <li>✓ 자동 스크롤</li>
                <li>✓ 반응형 텍스트 입력</li>
                <li>✓ 메시지 복사</li>
                <li>✓ 타이핑 인디케이터</li>
                <li>✓ 마크다운 렌더링</li>
                <li>✓ 코드 블록 하이라이팅</li>
                <li>✓ 파일 업로드 (드래그 앤 드롭)</li>
                <li>✓ 파일 미리보기</li>
                <li>✓ 대화 내용 검색</li>
                <li>✓ 검색어 하이라이팅</li>
                <li>✓ 검색 모드 (전체/제목/내용)</li>
                <li>✓ 설정 메뉴 (폰트, 삭제, 초기화)</li>
              </ul>
            </div>

            {searchQuery && (
              <div className={`mt-4 p-4 rounded-lg ${darkMode ? 'bg-purple-900/20' : 'bg-purple-50'} border ${darkMode ? 'border-purple-700' : 'border-purple-200'}`}>
                <h3 className={`text-sm font-medium mb-2 ${darkMode ? 'text-purple-300' : 'text-purple-900'} flex items-center gap-2`}>
                  <Search size={16} />
                  검색 중: "{searchQuery}"
                </h3>
                <p className={`text-xs ${darkMode ? 'text-purple-400' : 'text-purple-700'}`}>
                  {filteredConversations.length}개의 대화에서 일치하는 내용을 찾았습니다.
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default ChatInterface;